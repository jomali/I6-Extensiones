!% +language_name=Spanish


!!==============================================================================
!!
!!	AIM AND FIRE: PRUEBAS
!!	Sistema de apuntado y disparo multiplataforma
!!
!!==============================================================================
!!
!!	File:			aimAndFire_test.inf
!!	Author(s):		J. Francisco Martín <jfm.lisaso@gmail.com>
!!	Language:		ES (Castellano)
!!	System:			Inform-INFSP 6
!!	Platform:		Máquina-Z / GLULX
!!	Version:		1.0
!!	Released:		2018/01/16
!!
!!------------------------------------------------------------------------------
!!
!!	Copyright (c) 2018, J. Francisco Martín
!!
!!	Este programa es software libre: usted puede redistribuirlo y/o
!!	modificarlo bajo los términos de la Licencia Pública General GNU
!!	publicada por la Fundación para el Software Libre, ya sea la versión
!!	3 de la Licencia, o (a su elección) cualquier versión posterior.
!!
!!	Este programa se distribuye con la esperanza de que sea útil, pero
!!	SIN GARANTÍA ALGUNA; ni siquiera la garantía implícita MERCANTIL o
!!	de APTITUD PARA UN PROPÓSITO DETERMINADO. Consulte los detalles de
!!	la Licencia Pública General GNU para más información.
!!
!!	Debería haber recibido una copia de la Licencia Pública General GNU
!!	junto a este programa. En caso contrario, consulte
!!	<http://www.gnu.org/licenses/>.
!!
!!------------------------------------------------------------------------------


Constant Story "~Aim & Fire~: Pruebas";
Constant Headline "^Sistema de apuntado y disparo multiplataforma^";
Constant DEBUG_AIMANDFIRE;
Global _grid = 0;

Include "Parser.h";
Include "aimAndFire.h";
Include "VerbLib.h";

Object	LOCALIDAD "Espacio de pruebas"
 with	description
			"Puedes utilizar las siguientes acciones:^
			<> ~ANIMACIÓN <NUM>~: Lanza el sistema de apuntado y disparo basado
			en la animación de la retícula (sólo en GLULX). Con NUM=0 para
			reiniciar la posición de la retícula cada acción; NUM=1 para
			utilizar como punto inicial la posición final de la retícula en la
 			operación anterior.^
			<> ~DIFICULTAD <NUM>~: Con NUM comprendido entre [0, 100], para
			modificar la dificultad del sistema.^
			<> ~PROBABILISTA~: Lanza el sistema de apuntado y disparo basado en
			el método de operación probabilista.^
			<> ~RETÍCULA~: Alterna entre los distintos tipos de retícula
			predefinidos ---+, [+], | -- |---.",
 has	light;

[ HandleGlkEvent ev;
	if (ev-->0 == 1) ! evtype_Timer
		AimingManager.tick();
];

[ Initialise;
	AimingManager.set_grid_min_vx(300);
	AimingManager.set_grid_max_vx_factor(4);

	location = LOCALIDAD;
	lookmode = 2;
];

Include "SpanishG.h";

Verb	'animacion'
	* number						-> Animation
;
VerboIrregular "lanzar mecanismo de apuntado y disparo basado en animación
	interactiva" with imperativo 'animacion';

[ AnimationSub
	flag i;
	if (noun < 0 || noun > 1) "Introduce 0 o 1.";
	if (noun == 1) flag = true;
	print "Dificultad del disparo: ", AimingManager.get_difficulty(), "^";
	i = AimingManager.aim_and_fire(false, flag);
	"Resultado: ", i;
];

Verb	'dificultad'
	* number						-> Difficulty
;
VerboIrregular "establecer dificultad del sistema de apuntado y disparo"
	with imperativo 'dificultad';

[ DifficultySub;
	if (noun < 0 || noun > 100) {
		"Introduce un número comprendido entre 0 y 100.";
	}
	AimingManager.set_difficulty(noun);
	"Nuevo nivel de dificultad establecido: ", noun;
];

Verb	'reticula'
	*								-> Grid
;
VerboIrregular "modificar la retícula de apuntado" with imperativo 'reticula';

[ GridSub;
	_grid++;
	if (_grid > 2) _grid = 0;
	switch (_grid) {
		0:	AimingManager.set_grid("[+]");
		1:	AimingManager.set_grid("+");
		2:	AimingManager.set_grid("| -- |");
	}
	"Nueva retícula establecida.";
];

Verb	'probabilista'
	* 								-> Probabilistic
;
VerboIrregular "lanzar mecanismo de apuntado y disparo basado en modo
	probabilista" with imperativo 'probabilista';

[ ProbabilisticSub
	i;
	print "Dificultad del disparo: ", AimingManager.get_difficulty(), "^";
	i = AimingManager.aim_and_fire(true);
	"Resultado: ", i;
];
